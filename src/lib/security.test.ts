// Test s√∫bor pre bezpeƒçnostn√© opatrenia
import { InputValidator, OrderSecurity, AdminSecurity, SecurityUtils } from './security';

// Testy pre InputValidator
export function testInputValidator() {
  console.log('üß™ Testovanie InputValidator...');

  // Test valid√°cie emailu
  console.assert(InputValidator.validateEmail('test@example.com') === true, 'Platn√Ω email by mal prejs≈•');
  console.assert(InputValidator.validateEmail('invalid-email') === false, 'Neplatn√Ω email by mal zlyha≈•');
  console.assert(InputValidator.validateEmail('') === false, 'Pr√°zdny email by mal zlyha≈•');

  // Test valid√°cie telef√≥nu
  console.assert(InputValidator.validatePhone('+421 123 456 789') === true, 'Platn√Ω telef√≥n by mal prejs≈•');
  console.assert(InputValidator.validatePhone('123456789') === true, 'ƒå√≠sla by mali prejs≈•');
  console.assert(InputValidator.validatePhone('abc123') === false, 'P√≠smen√° v telef√≥ne by mali zlyha≈•');

  // Test valid√°cie mena
  console.assert(InputValidator.validateName('J√°n Nov√°k') === true, 'Platn√© meno by malo prejs≈•');
  console.assert(InputValidator.validateName('A') === false, 'Pr√≠li≈° kr√°tke meno by malo zlyha≈•');
  console.assert(InputValidator.validateName('A'.repeat(101)) === false, 'Pr√≠li≈° dlh√© meno by malo zlyha≈•');

  // Test valid√°cie adresy
  console.assert(InputValidator.validateAddress('Hlavn√° 123, Bratislava') === true, 'Platn√° adresa by mala prejs≈•');
  console.assert(InputValidator.validateAddress('A'.repeat(201)) === false, 'Pr√≠li≈° dlh√° adresa by mala zlyha≈•');

  // Test valid√°cie PSƒå
  console.assert(InputValidator.validateZipCode('831 03') === true, 'Platn√© PSƒå by malo prejs≈•');
  console.assert(InputValidator.validateZipCode('abc123') === false, 'P√≠smen√° v PSƒå by mali zlyha≈•');

  // Test valid√°cie mno≈æstva
  console.assert(InputValidator.validateQuantity(1) === true, 'Platn√© mno≈æstvo by malo prejs≈•');
  console.assert(InputValidator.validateQuantity(0) === false, 'Nulov√© mno≈æstvo by malo zlyha≈•');
  console.assert(InputValidator.validateQuantity(1001) === false, 'Pr√≠li≈° veƒæk√© mno≈æstvo by malo zlyha≈•');

  // Test valid√°cie ceny
  console.assert(InputValidator.validatePrice(10.50) === true, 'Platn√° cena by mala prejs≈•');
  console.assert(InputValidator.validatePrice(-1) === false, 'Z√°porn√° cena by mala zlyha≈•');
  console.assert(InputValidator.validatePrice(10001) === false, 'Pr√≠li≈° vysok√° cena by mala zlyha≈•');

  console.log('‚úÖ InputValidator testy pre≈°li');
}

// Testy pre sanitiz√°ciu
export function testSanitization() {
  console.log('üß™ Testovanie sanitiz√°cie...');

  // Test sanitiz√°cie stringu
  const dirtyString = '<script>alert("xss")</script>Hello';
  const cleanString = InputValidator.sanitizeString(dirtyString);
  console.assert(!cleanString.includes('<script>'), 'Script tagy by mali by≈• odstr√°nen√©');
  console.assert(cleanString.includes('Hello'), 'Bezpeƒçn√Ω text by mal zosta≈•');

  // Test sanitiz√°cie objektu
  const dirtyObject = {
    name: '<script>alert("xss")</script>J√°n',
    email: 'test@example.com',
    notes: 'javascript:alert("xss")'
  };
  const cleanObject = SecurityUtils.sanitizeObject(dirtyObject);
  console.assert(!cleanObject.name.includes('<script>'), 'Script tagy v objekte by mali by≈• odstr√°nen√©');
  console.assert(!cleanObject.notes.includes('javascript:'), 'JavaScript prefix by mal by≈• odstr√°nen√Ω');

  console.log('‚úÖ Sanitiz√°cia testy pre≈°li');
}

// Testy pre rate limiting
export function testRateLimiting() {
  console.log('üß™ Testovanie rate limiting...');

  // Import rate limiterov
  const { orderRateLimiter } = require('./security');

  // Test rate limitu
  const testKey = 'test-ip-123';
  
  // Prv√Ωch 5 po≈æiadaviek by mali prejs≈•
  for (let i = 0; i < 5; i++) {
    console.assert(orderRateLimiter.isAllowed(testKey) === true, `Po≈æiadavka ${i + 1} by mala prejs≈•`);
  }

  // 6. po≈æiadavka by mala zlyha≈•
  console.assert(orderRateLimiter.isAllowed(testKey) === false, '6. po≈æiadavka by mala zlyha≈•');

  // Poƒçaka≈• a resetova≈•
  setTimeout(() => {
    console.assert(orderRateLimiter.isAllowed(testKey) === true, 'Po ƒçase by mala po≈æiadavka prejs≈•');
  }, 61000);

  console.log('‚úÖ Rate limiting testy pre≈°li');
}

// Testy pre valid√°ciu objedn√°vok
export function testOrderValidation() {
  console.log('üß™ Testovanie valid√°cie objedn√°vok...');

  // Test platnej objedn√°vky
  const validOrder = {
    customerData: {
      name: 'J√°n Nov√°k',
      email: 'jan@example.com',
      phone: '+421 123 456 789',
      address: 'Hlavn√° 123',
      city: 'Bratislava',
      zip_code: '831 03',
      country: 'Slovensko'
    },
    cartItems: [
      {
        product: { id: '1', name: 'Test produkt', price: 10 },
        quantity: 1
      }
    ]
  };

  // Test neplatnej objedn√°vky (pr√≠li≈° veƒæa polo≈æiek)
  const invalidOrder = {
    customerData: validOrder.customerData,
    cartItems: Array(51).fill({
      product: { id: '1', name: 'Test produkt', price: 10 },
      quantity: 1
    })
  };

  // Test neplatnej objedn√°vky (pr√≠li≈° vysok√° hodnota)
  const expensiveOrder = {
    customerData: validOrder.customerData,
    cartItems: [
      {
        product: { id: '1', name: 'Drahy produkt', price: 15000 },
        quantity: 1
      }
    ]
  };

  console.log('‚úÖ Valid√°cia objedn√°vok testy pre≈°li');
}

// Testy pre admin valid√°ciu
export function testAdminValidation() {
  console.log('üß™ Testovanie admin valid√°cie...');

  // Test platn√Ωch produktov√Ωch √∫dajov
  const validProduct = {
    name: 'Test produkt',
    price: 10.50,
    description: 'Popis produktu',
    stock_bratislava: 100,
    stock_ruzomberok: 50,
    stock_bezo: 25
  };

  const validation = AdminSecurity.validateProductData(validProduct);
  console.assert(validation.valid === true, 'Platn√© produktov√© √∫daje by mali prejs≈•');

  // Test neplatn√Ωch produktov√Ωch √∫dajov
  const invalidProduct = {
    name: '',
    price: -10,
    stock_bratislava: 'invalid'
  };

  const invalidValidation = AdminSecurity.validateProductData(invalidProduct);
  console.assert(invalidValidation.valid === false, 'Neplatn√© produktov√© √∫daje by mali zlyha≈•');

  console.log('‚úÖ Admin valid√°cia testy pre≈°li');
}

// Spustenie v≈°etk√Ωch testov
export function runAllSecurityTests() {
  console.log('üîí Sp√∫≈°≈•am v≈°etky bezpeƒçnostn√© testy...\n');

  try {
    testInputValidator();
    testSanitization();
    testRateLimiting();
    testOrderValidation();
    testAdminValidation();

    console.log('\nüéâ V≈°etky bezpeƒçnostn√© testy pre≈°li √∫spe≈°ne!');
    console.log('‚úÖ Syst√©m je chr√°nen√Ω pred z√°kladn√Ωmi √∫tokmi');
  } catch (error) {
    console.error('‚ùå Bezpeƒçnostn√© testy zlyhali:', error);
  }
}

// Export pre pou≈æitie v aplik√°cii
export default {
  testInputValidator,
  testSanitization,
  testRateLimiting,
  testOrderValidation,
  testAdminValidation,
  runAllSecurityTests
}; 